//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.entitlements` struct is generated, and contains static references to 1 properties.
  struct entitlements {
    struct comAppleSecurityApplicationGroups {
      static let groupComJetchat2022JetChatWidget = infoPlistString(path: ["com.apple.security.application-groups"], key: "group.com.jetchat.2022.JetChatWidget") ?? "group.com.jetchat.2022.JetChatWidget"

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 49 files.
  struct file {
    /// Resource file `Emoticons.bundle`.
    static let emoticonsBundle = Rswift.FileResource(bundle: R.hostingBundle, name: "Emoticons", pathExtension: "bundle")
    /// Resource file `Expression.bundle`.
    static let expressionBundle = Rswift.FileResource(bundle: R.hostingBundle, name: "Expression", pathExtension: "bundle")
    /// Resource file `Expression.plist`.
    static let expressionPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "Expression", pathExtension: "plist")
    /// Resource file `HUDAssets.bundle`.
    static let hudAssetsBundle = Rswift.FileResource(bundle: R.hostingBundle, name: "HUDAssets", pathExtension: "bundle")
    /// Resource file `ToolViewEmotion@2x.png`.
    static let toolViewEmotion2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ToolViewEmotion@2x", pathExtension: "png")
    /// Resource file `ToolViewEmotion@3x.png`.
    static let toolViewEmotion3xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ToolViewEmotion@3x", pathExtension: "png")
    /// Resource file `ToolViewEmotionHL@2x.png`.
    static let toolViewEmotionHL2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ToolViewEmotionHL@2x", pathExtension: "png")
    /// Resource file `ToolViewEmotionHL@3x.png`.
    static let toolViewEmotionHL3xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ToolViewEmotionHL@3x", pathExtension: "png")
    /// Resource file `ToolViewInputVoice@2x.png`.
    static let toolViewInputVoice2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ToolViewInputVoice@2x", pathExtension: "png")
    /// Resource file `ToolViewInputVoice@3x.png`.
    static let toolViewInputVoice3xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ToolViewInputVoice@3x", pathExtension: "png")
    /// Resource file `ToolViewInputVoiceHL@2x.png`.
    static let toolViewInputVoiceHL2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ToolViewInputVoiceHL@2x", pathExtension: "png")
    /// Resource file `ToolViewInputVoiceHL@3x.png`.
    static let toolViewInputVoiceHL3xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ToolViewInputVoiceHL@3x", pathExtension: "png")
    /// Resource file `ToolViewKeyboard@2x.png`.
    static let toolViewKeyboard2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ToolViewKeyboard@2x", pathExtension: "png")
    /// Resource file `ToolViewKeyboard@3x.png`.
    static let toolViewKeyboard3xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ToolViewKeyboard@3x", pathExtension: "png")
    /// Resource file `ToolViewKeyboardHL@2x.png`.
    static let toolViewKeyboardHL2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ToolViewKeyboardHL@2x", pathExtension: "png")
    /// Resource file `ToolViewKeyboardHL@3x.png`.
    static let toolViewKeyboardHL3xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ToolViewKeyboardHL@3x", pathExtension: "png")
    /// Resource file `TypeSelectorBtnHL_Black@2x.png`.
    static let typeSelectorBtnHL_Black2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "TypeSelectorBtnHL_Black@2x", pathExtension: "png")
    /// Resource file `TypeSelectorBtnHL_Black@3x.png`.
    static let typeSelectorBtnHL_Black3xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "TypeSelectorBtnHL_Black@3x", pathExtension: "png")
    /// Resource file `TypeSelectorBtn_Black@2x.png`.
    static let typeSelectorBtn_Black2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "TypeSelectorBtn_Black@2x", pathExtension: "png")
    /// Resource file `TypeSelectorBtn_Black@3x.png`.
    static let typeSelectorBtn_Black3xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "TypeSelectorBtn_Black@3x", pathExtension: "png")
    /// Resource file `ic_emotion_delete@2x.png`.
    static let ic_emotion_delete2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_emotion_delete@2x", pathExtension: "png")
    /// Resource file `ic_emotion_delete@3x.png`.
    static let ic_emotion_delete3xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_emotion_delete@3x", pathExtension: "png")
    /// Resource file `ic_more_album@2x.png`.
    static let ic_more_album2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_more_album@2x", pathExtension: "png")
    /// Resource file `ic_more_album@3x.png`.
    static let ic_more_album3xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_more_album@3x", pathExtension: "png")
    /// Resource file `ic_more_camera@2x.png`.
    static let ic_more_camera2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_more_camera@2x", pathExtension: "png")
    /// Resource file `ic_more_camera@3x.png`.
    static let ic_more_camera3xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_more_camera@3x", pathExtension: "png")
    /// Resource file `ic_more_favorite@2x.png`.
    static let ic_more_favorite2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_more_favorite@2x", pathExtension: "png")
    /// Resource file `ic_more_favorite@3x.png`.
    static let ic_more_favorite3xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_more_favorite@3x", pathExtension: "png")
    /// Resource file `ic_more_friendcard@2x.png`.
    static let ic_more_friendcard2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_more_friendcard@2x", pathExtension: "png")
    /// Resource file `ic_more_friendcard@3x.png`.
    static let ic_more_friendcard3xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_more_friendcard@3x", pathExtension: "png")
    /// Resource file `ic_more_location@2x.png`.
    static let ic_more_location2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_more_location@2x", pathExtension: "png")
    /// Resource file `ic_more_location@3x.png`.
    static let ic_more_location3xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_more_location@3x", pathExtension: "png")
    /// Resource file `ic_more_pay@2x.png`.
    static let ic_more_pay2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_more_pay@2x", pathExtension: "png")
    /// Resource file `ic_more_pay@3x.png`.
    static let ic_more_pay3xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_more_pay@3x", pathExtension: "png")
    /// Resource file `ic_more_sight@2x.png`.
    static let ic_more_sight2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_more_sight@2x", pathExtension: "png")
    /// Resource file `ic_more_sight@3x.png`.
    static let ic_more_sight3xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_more_sight@3x", pathExtension: "png")
    /// Resource file `ic_more_video@2x.png`.
    static let ic_more_video2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_more_video@2x", pathExtension: "png")
    /// Resource file `ic_more_video@3x.png`.
    static let ic_more_video3xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_more_video@3x", pathExtension: "png")
    /// Resource file `ic_more_voice@2x.png`.
    static let ic_more_voice2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_more_voice@2x", pathExtension: "png")
    /// Resource file `ic_more_voice@3x.png`.
    static let ic_more_voice3xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_more_voice@3x", pathExtension: "png")
    /// Resource file `ic_more_wallet@2x.png`.
    static let ic_more_wallet2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_more_wallet@2x", pathExtension: "png")
    /// Resource file `ic_more_wallet@3x.png`.
    static let ic_more_wallet3xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_more_wallet@3x", pathExtension: "png")
    /// Resource file `icon_emoji_expression@2x.png`.
    static let icon_emoji_expression2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "icon_emoji_expression@2x", pathExtension: "png")
    /// Resource file `icon_emoji_expression@3x.png`.
    static let icon_emoji_expression3xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "icon_emoji_expression@3x", pathExtension: "png")
    /// Resource file `icon_qrc_border@3x.png`.
    static let icon_qrc_border3xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "icon_qrc_border@3x", pathExtension: "png")
    /// Resource file `icon_qrc_line@3x.png`.
    static let icon_qrc_line3xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "icon_qrc_line@3x", pathExtension: "png")
    /// Resource file `localVideo0.mp4`.
    static let localVideo0Mp4 = Rswift.FileResource(bundle: R.hostingBundle, name: "localVideo0", pathExtension: "mp4")
    /// Resource file `moments1.json`.
    static let moments1Json = Rswift.FileResource(bundle: R.hostingBundle, name: "moments1", pathExtension: "json")
    /// Resource file `moments2.json`.
    static let moments2Json = Rswift.FileResource(bundle: R.hostingBundle, name: "moments2", pathExtension: "json")

    /// `bundle.url(forResource: "Emoticons", withExtension: "bundle")`
    static func emoticonsBundle(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.emoticonsBundle
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Expression", withExtension: "bundle")`
    static func expressionBundle(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.expressionBundle
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Expression", withExtension: "plist")`
    static func expressionPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.expressionPlist
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "HUDAssets", withExtension: "bundle")`
    static func hudAssetsBundle(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.hudAssetsBundle
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ToolViewEmotion@2x", withExtension: "png")`
    static func toolViewEmotion2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.toolViewEmotion2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ToolViewEmotion@3x", withExtension: "png")`
    static func toolViewEmotion3xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.toolViewEmotion3xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ToolViewEmotionHL@2x", withExtension: "png")`
    static func toolViewEmotionHL2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.toolViewEmotionHL2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ToolViewEmotionHL@3x", withExtension: "png")`
    static func toolViewEmotionHL3xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.toolViewEmotionHL3xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ToolViewInputVoice@2x", withExtension: "png")`
    static func toolViewInputVoice2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.toolViewInputVoice2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ToolViewInputVoice@3x", withExtension: "png")`
    static func toolViewInputVoice3xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.toolViewInputVoice3xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ToolViewInputVoiceHL@2x", withExtension: "png")`
    static func toolViewInputVoiceHL2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.toolViewInputVoiceHL2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ToolViewInputVoiceHL@3x", withExtension: "png")`
    static func toolViewInputVoiceHL3xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.toolViewInputVoiceHL3xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ToolViewKeyboard@2x", withExtension: "png")`
    static func toolViewKeyboard2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.toolViewKeyboard2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ToolViewKeyboard@3x", withExtension: "png")`
    static func toolViewKeyboard3xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.toolViewKeyboard3xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ToolViewKeyboardHL@2x", withExtension: "png")`
    static func toolViewKeyboardHL2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.toolViewKeyboardHL2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ToolViewKeyboardHL@3x", withExtension: "png")`
    static func toolViewKeyboardHL3xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.toolViewKeyboardHL3xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "TypeSelectorBtnHL_Black@2x", withExtension: "png")`
    static func typeSelectorBtnHL_Black2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.typeSelectorBtnHL_Black2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "TypeSelectorBtnHL_Black@3x", withExtension: "png")`
    static func typeSelectorBtnHL_Black3xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.typeSelectorBtnHL_Black3xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "TypeSelectorBtn_Black@2x", withExtension: "png")`
    static func typeSelectorBtn_Black2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.typeSelectorBtn_Black2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "TypeSelectorBtn_Black@3x", withExtension: "png")`
    static func typeSelectorBtn_Black3xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.typeSelectorBtn_Black3xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_emotion_delete@2x", withExtension: "png")`
    static func ic_emotion_delete2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_emotion_delete2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_emotion_delete@3x", withExtension: "png")`
    static func ic_emotion_delete3xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_emotion_delete3xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_more_album@2x", withExtension: "png")`
    static func ic_more_album2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_more_album2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_more_album@3x", withExtension: "png")`
    static func ic_more_album3xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_more_album3xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_more_camera@2x", withExtension: "png")`
    static func ic_more_camera2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_more_camera2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_more_camera@3x", withExtension: "png")`
    static func ic_more_camera3xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_more_camera3xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_more_favorite@2x", withExtension: "png")`
    static func ic_more_favorite2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_more_favorite2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_more_favorite@3x", withExtension: "png")`
    static func ic_more_favorite3xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_more_favorite3xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_more_friendcard@2x", withExtension: "png")`
    static func ic_more_friendcard2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_more_friendcard2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_more_friendcard@3x", withExtension: "png")`
    static func ic_more_friendcard3xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_more_friendcard3xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_more_location@2x", withExtension: "png")`
    static func ic_more_location2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_more_location2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_more_location@3x", withExtension: "png")`
    static func ic_more_location3xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_more_location3xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_more_pay@2x", withExtension: "png")`
    static func ic_more_pay2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_more_pay2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_more_pay@3x", withExtension: "png")`
    static func ic_more_pay3xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_more_pay3xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_more_sight@2x", withExtension: "png")`
    static func ic_more_sight2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_more_sight2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_more_sight@3x", withExtension: "png")`
    static func ic_more_sight3xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_more_sight3xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_more_video@2x", withExtension: "png")`
    static func ic_more_video2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_more_video2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_more_video@3x", withExtension: "png")`
    static func ic_more_video3xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_more_video3xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_more_voice@2x", withExtension: "png")`
    static func ic_more_voice2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_more_voice2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_more_voice@3x", withExtension: "png")`
    static func ic_more_voice3xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_more_voice3xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_more_wallet@2x", withExtension: "png")`
    static func ic_more_wallet2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_more_wallet2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_more_wallet@3x", withExtension: "png")`
    static func ic_more_wallet3xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_more_wallet3xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "icon_emoji_expression@2x", withExtension: "png")`
    static func icon_emoji_expression2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.icon_emoji_expression2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "icon_emoji_expression@3x", withExtension: "png")`
    static func icon_emoji_expression3xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.icon_emoji_expression3xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "icon_qrc_border@3x", withExtension: "png")`
    static func icon_qrc_border3xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.icon_qrc_border3xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "icon_qrc_line@3x", withExtension: "png")`
    static func icon_qrc_line3xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.icon_qrc_line3xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "localVideo0", withExtension: "mp4")`
    static func localVideo0Mp4(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.localVideo0Mp4
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "moments1", withExtension: "json")`
    static func moments1Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.moments1Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "moments2", withExtension: "json")`
    static func moments2Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.moments2Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 69 images.
  struct image {
    /// Image `LaunchImage`.
    static let launchImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "LaunchImage")
    /// Image `MessageVideoDownload`.
    static let messageVideoDownload = Rswift.ImageResource(bundle: R.hostingBundle, name: "MessageVideoDownload")
    /// Image `MessageVideoPlay`.
    static let messageVideoPlay = Rswift.ImageResource(bundle: R.hostingBundle, name: "MessageVideoPlay")
    /// Image `ReceiverImageNodeBorder`.
    static let receiverImageNodeBorder = Rswift.ImageResource(bundle: R.hostingBundle, name: "ReceiverImageNodeBorder")
    /// Image `ToolViewEmotionHL`.
    static let toolViewEmotionHL = Rswift.ImageResource(bundle: R.hostingBundle, name: "ToolViewEmotionHL")
    /// Image `ToolViewEmotion`.
    static let toolViewEmotion = Rswift.ImageResource(bundle: R.hostingBundle, name: "ToolViewEmotion")
    /// Image `ToolViewInputVoiceHL`.
    static let toolViewInputVoiceHL = Rswift.ImageResource(bundle: R.hostingBundle, name: "ToolViewInputVoiceHL")
    /// Image `ToolViewInputVoice`.
    static let toolViewInputVoice = Rswift.ImageResource(bundle: R.hostingBundle, name: "ToolViewInputVoice")
    /// Image `ToolViewKeyboardHL`.
    static let toolViewKeyboardHL = Rswift.ImageResource(bundle: R.hostingBundle, name: "ToolViewKeyboardHL")
    /// Image `ToolViewKeyboard`.
    static let toolViewKeyboard = Rswift.ImageResource(bundle: R.hostingBundle, name: "ToolViewKeyboard")
    /// Image `TypeSelectorBtnHL_Black`.
    static let typeSelectorBtnHL_Black = Rswift.ImageResource(bundle: R.hostingBundle, name: "TypeSelectorBtnHL_Black")
    /// Image `TypeSelectorBtn_Black`.
    static let typeSelectorBtn_Black = Rswift.ImageResource(bundle: R.hostingBundle, name: "TypeSelectorBtn_Black")
    /// Image `ic_album_reflash`.
    static let ic_album_reflash = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_album_reflash")
    /// Image `ic_avatar_placeholder`.
    static let ic_avatar_placeholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_avatar_placeholder")
    /// Image `ic_comment_normal`.
    static let ic_comment_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_comment_normal")
    /// Image `ic_comment_selected`.
    static let ic_comment_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_comment_selected")
    /// Image `ic_emotion_delete`.
    static let ic_emotion_delete = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_emotion_delete")
    /// Image `ic_group_placeholder`.
    static let ic_group_placeholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_group_placeholder")
    /// Image `ic_list_selection`.
    static let ic_list_selection = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_list_selection")
    /// Image `ic_more_album`.
    static let ic_more_album = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_more_album")
    /// Image `ic_more_camera`.
    static let ic_more_camera = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_more_camera")
    /// Image `ic_more_favorite`.
    static let ic_more_favorite = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_more_favorite")
    /// Image `ic_more_friendcard`.
    static let ic_more_friendcard = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_more_friendcard")
    /// Image `ic_more_location`.
    static let ic_more_location = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_more_location")
    /// Image `ic_more_pay`.
    static let ic_more_pay = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_more_pay")
    /// Image `ic_more_sight`.
    static let ic_more_sight = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_more_sight")
    /// Image `ic_more_video`.
    static let ic_more_video = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_more_video")
    /// Image `ic_more_voice`.
    static let ic_more_voice = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_more_voice")
    /// Image `ic_more_wallet`.
    static let ic_more_wallet = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_more_wallet")
    /// Image `ic_msg_forward_n`.
    static let ic_msg_forward_n = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_msg_forward_n")
    /// Image `ic_msg_forward_s`.
    static let ic_msg_forward_s = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_msg_forward_s")
    /// Image `ic_placeholder`.
    static let ic_placeholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_placeholder")
    /// Image `ic_star_normal`.
    static let ic_star_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_star_normal")
    /// Image `ic_star_selected`.
    static let ic_star_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_star_selected")
    /// Image `ic_tabbar01_normal`.
    static let ic_tabbar01_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tabbar01_normal")
    /// Image `ic_tabbar01_selected`.
    static let ic_tabbar01_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tabbar01_selected")
    /// Image `ic_tabbar02_normal`.
    static let ic_tabbar02_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tabbar02_normal")
    /// Image `ic_tabbar02_selected`.
    static let ic_tabbar02_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tabbar02_selected")
    /// Image `ic_tabbar03_normal`.
    static let ic_tabbar03_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tabbar03_normal")
    /// Image `ic_tabbar03_selected`.
    static let ic_tabbar03_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tabbar03_selected")
    /// Image `ic_tabbar04_normal`.
    static let ic_tabbar04_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tabbar04_normal")
    /// Image `ic_tabbar04_selected`.
    static let ic_tabbar04_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tabbar04_selected")
    /// Image `icon_arrow_right`.
    static let icon_arrow_right = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_arrow_right")
    /// Image `icon_emoji_expression`.
    static let icon_emoji_expression = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_emoji_expression")
    /// Image `icon_more_add`.
    static let icon_more_add = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_more_add")
    /// Image `icon_qrc_border`.
    static let icon_qrc_border = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_qrc_border")
    /// Image `icon_qrc_line`.
    static let icon_qrc_line = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_qrc_line")
    /// Image `message_receiver_background_highlight`.
    static let message_receiver_background_highlight = Rswift.ImageResource(bundle: R.hostingBundle, name: "message_receiver_background_highlight")
    /// Image `message_receiver_background_normal`.
    static let message_receiver_background_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "message_receiver_background_normal")
    /// Image `message_receiver_background_reversed`.
    static let message_receiver_background_reversed = Rswift.ImageResource(bundle: R.hostingBundle, name: "message_receiver_background_reversed")
    /// Image `message_sender_background_highlight`.
    static let message_sender_background_highlight = Rswift.ImageResource(bundle: R.hostingBundle, name: "message_sender_background_highlight")
    /// Image `message_sender_background_normal`.
    static let message_sender_background_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "message_sender_background_normal")
    /// Image `message_sender_background_reversed`.
    static let message_sender_background_reversed = Rswift.ImageResource(bundle: R.hostingBundle, name: "message_sender_background_reversed")
    /// Image `message_voice_receiver_normal`.
    static let message_voice_receiver_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "message_voice_receiver_normal")
    /// Image `message_voice_receiver_playing_1`.
    static let message_voice_receiver_playing_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "message_voice_receiver_playing_1")
    /// Image `message_voice_receiver_playing_2`.
    static let message_voice_receiver_playing_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "message_voice_receiver_playing_2")
    /// Image `message_voice_receiver_playing_3`.
    static let message_voice_receiver_playing_3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "message_voice_receiver_playing_3")
    /// Image `message_voice_sender_normal`.
    static let message_voice_sender_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "message_voice_sender_normal")
    /// Image `message_voice_sender_playing_1`.
    static let message_voice_sender_playing_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "message_voice_sender_playing_1")
    /// Image `message_voice_sender_playing_2`.
    static let message_voice_sender_playing_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "message_voice_sender_playing_2")
    /// Image `message_voice_sender_playing_3`.
    static let message_voice_sender_playing_3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "message_voice_sender_playing_3")
    /// Image `nav_back_black`.
    static let nav_back_black = Rswift.ImageResource(bundle: R.hostingBundle, name: "nav_back_black")
    /// Image `nav_back_white`.
    static let nav_back_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "nav_back_white")
    /// Image `nav_camera_black`.
    static let nav_camera_black = Rswift.ImageResource(bundle: R.hostingBundle, name: "nav_camera_black")
    /// Image `nav_camera_white`.
    static let nav_camera_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "nav_camera_white")
    /// Image `play_btn_normal`.
    static let play_btn_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "play_btn_normal")
    /// Image `play_btn_pressed`.
    static let play_btn_pressed = Rswift.ImageResource(bundle: R.hostingBundle, name: "play_btn_pressed")
    /// Image `player_back_button`.
    static let player_back_button = Rswift.ImageResource(bundle: R.hostingBundle, name: "player_back_button")
    /// Image `player_suspend_button`.
    static let player_suspend_button = Rswift.ImageResource(bundle: R.hostingBundle, name: "player_suspend_button")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "LaunchImage", bundle: ..., traitCollection: ...)`
    static func launchImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.launchImage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "MessageVideoDownload", bundle: ..., traitCollection: ...)`
    static func messageVideoDownload(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.messageVideoDownload, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "MessageVideoPlay", bundle: ..., traitCollection: ...)`
    static func messageVideoPlay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.messageVideoPlay, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ReceiverImageNodeBorder", bundle: ..., traitCollection: ...)`
    static func receiverImageNodeBorder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.receiverImageNodeBorder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ToolViewEmotion", bundle: ..., traitCollection: ...)`
    static func toolViewEmotion(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.toolViewEmotion, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ToolViewEmotionHL", bundle: ..., traitCollection: ...)`
    static func toolViewEmotionHL(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.toolViewEmotionHL, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ToolViewInputVoice", bundle: ..., traitCollection: ...)`
    static func toolViewInputVoice(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.toolViewInputVoice, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ToolViewInputVoiceHL", bundle: ..., traitCollection: ...)`
    static func toolViewInputVoiceHL(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.toolViewInputVoiceHL, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ToolViewKeyboard", bundle: ..., traitCollection: ...)`
    static func toolViewKeyboard(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.toolViewKeyboard, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ToolViewKeyboardHL", bundle: ..., traitCollection: ...)`
    static func toolViewKeyboardHL(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.toolViewKeyboardHL, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "TypeSelectorBtnHL_Black", bundle: ..., traitCollection: ...)`
    static func typeSelectorBtnHL_Black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.typeSelectorBtnHL_Black, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "TypeSelectorBtn_Black", bundle: ..., traitCollection: ...)`
    static func typeSelectorBtn_Black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.typeSelectorBtn_Black, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_album_reflash", bundle: ..., traitCollection: ...)`
    static func ic_album_reflash(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_album_reflash, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_avatar_placeholder", bundle: ..., traitCollection: ...)`
    static func ic_avatar_placeholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_avatar_placeholder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_comment_normal", bundle: ..., traitCollection: ...)`
    static func ic_comment_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_comment_normal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_comment_selected", bundle: ..., traitCollection: ...)`
    static func ic_comment_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_comment_selected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_emotion_delete", bundle: ..., traitCollection: ...)`
    static func ic_emotion_delete(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_emotion_delete, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_group_placeholder", bundle: ..., traitCollection: ...)`
    static func ic_group_placeholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_group_placeholder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_list_selection", bundle: ..., traitCollection: ...)`
    static func ic_list_selection(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_list_selection, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_more_album", bundle: ..., traitCollection: ...)`
    static func ic_more_album(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_more_album, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_more_camera", bundle: ..., traitCollection: ...)`
    static func ic_more_camera(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_more_camera, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_more_favorite", bundle: ..., traitCollection: ...)`
    static func ic_more_favorite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_more_favorite, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_more_friendcard", bundle: ..., traitCollection: ...)`
    static func ic_more_friendcard(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_more_friendcard, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_more_location", bundle: ..., traitCollection: ...)`
    static func ic_more_location(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_more_location, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_more_pay", bundle: ..., traitCollection: ...)`
    static func ic_more_pay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_more_pay, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_more_sight", bundle: ..., traitCollection: ...)`
    static func ic_more_sight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_more_sight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_more_video", bundle: ..., traitCollection: ...)`
    static func ic_more_video(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_more_video, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_more_voice", bundle: ..., traitCollection: ...)`
    static func ic_more_voice(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_more_voice, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_more_wallet", bundle: ..., traitCollection: ...)`
    static func ic_more_wallet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_more_wallet, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_msg_forward_n", bundle: ..., traitCollection: ...)`
    static func ic_msg_forward_n(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_msg_forward_n, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_msg_forward_s", bundle: ..., traitCollection: ...)`
    static func ic_msg_forward_s(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_msg_forward_s, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_placeholder", bundle: ..., traitCollection: ...)`
    static func ic_placeholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_placeholder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_star_normal", bundle: ..., traitCollection: ...)`
    static func ic_star_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_star_normal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_star_selected", bundle: ..., traitCollection: ...)`
    static func ic_star_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_star_selected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_tabbar01_normal", bundle: ..., traitCollection: ...)`
    static func ic_tabbar01_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tabbar01_normal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_tabbar01_selected", bundle: ..., traitCollection: ...)`
    static func ic_tabbar01_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tabbar01_selected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_tabbar02_normal", bundle: ..., traitCollection: ...)`
    static func ic_tabbar02_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tabbar02_normal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_tabbar02_selected", bundle: ..., traitCollection: ...)`
    static func ic_tabbar02_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tabbar02_selected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_tabbar03_normal", bundle: ..., traitCollection: ...)`
    static func ic_tabbar03_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tabbar03_normal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_tabbar03_selected", bundle: ..., traitCollection: ...)`
    static func ic_tabbar03_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tabbar03_selected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_tabbar04_normal", bundle: ..., traitCollection: ...)`
    static func ic_tabbar04_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tabbar04_normal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_tabbar04_selected", bundle: ..., traitCollection: ...)`
    static func ic_tabbar04_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tabbar04_selected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_arrow_right", bundle: ..., traitCollection: ...)`
    static func icon_arrow_right(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_arrow_right, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_emoji_expression", bundle: ..., traitCollection: ...)`
    static func icon_emoji_expression(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_emoji_expression, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_more_add", bundle: ..., traitCollection: ...)`
    static func icon_more_add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_more_add, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_qrc_border", bundle: ..., traitCollection: ...)`
    static func icon_qrc_border(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_qrc_border, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_qrc_line", bundle: ..., traitCollection: ...)`
    static func icon_qrc_line(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_qrc_line, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "message_receiver_background_highlight", bundle: ..., traitCollection: ...)`
    static func message_receiver_background_highlight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.message_receiver_background_highlight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "message_receiver_background_normal", bundle: ..., traitCollection: ...)`
    static func message_receiver_background_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.message_receiver_background_normal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "message_receiver_background_reversed", bundle: ..., traitCollection: ...)`
    static func message_receiver_background_reversed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.message_receiver_background_reversed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "message_sender_background_highlight", bundle: ..., traitCollection: ...)`
    static func message_sender_background_highlight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.message_sender_background_highlight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "message_sender_background_normal", bundle: ..., traitCollection: ...)`
    static func message_sender_background_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.message_sender_background_normal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "message_sender_background_reversed", bundle: ..., traitCollection: ...)`
    static func message_sender_background_reversed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.message_sender_background_reversed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "message_voice_receiver_normal", bundle: ..., traitCollection: ...)`
    static func message_voice_receiver_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.message_voice_receiver_normal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "message_voice_receiver_playing_1", bundle: ..., traitCollection: ...)`
    static func message_voice_receiver_playing_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.message_voice_receiver_playing_1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "message_voice_receiver_playing_2", bundle: ..., traitCollection: ...)`
    static func message_voice_receiver_playing_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.message_voice_receiver_playing_2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "message_voice_receiver_playing_3", bundle: ..., traitCollection: ...)`
    static func message_voice_receiver_playing_3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.message_voice_receiver_playing_3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "message_voice_sender_normal", bundle: ..., traitCollection: ...)`
    static func message_voice_sender_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.message_voice_sender_normal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "message_voice_sender_playing_1", bundle: ..., traitCollection: ...)`
    static func message_voice_sender_playing_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.message_voice_sender_playing_1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "message_voice_sender_playing_2", bundle: ..., traitCollection: ...)`
    static func message_voice_sender_playing_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.message_voice_sender_playing_2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "message_voice_sender_playing_3", bundle: ..., traitCollection: ...)`
    static func message_voice_sender_playing_3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.message_voice_sender_playing_3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "nav_back_black", bundle: ..., traitCollection: ...)`
    static func nav_back_black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nav_back_black, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "nav_back_white", bundle: ..., traitCollection: ...)`
    static func nav_back_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nav_back_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "nav_camera_black", bundle: ..., traitCollection: ...)`
    static func nav_camera_black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nav_camera_black, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "nav_camera_white", bundle: ..., traitCollection: ...)`
    static func nav_camera_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nav_camera_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "play_btn_normal", bundle: ..., traitCollection: ...)`
    static func play_btn_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.play_btn_normal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "play_btn_pressed", bundle: ..., traitCollection: ...)`
    static func play_btn_pressed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.play_btn_pressed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "player_back_button", bundle: ..., traitCollection: ...)`
    static func player_back_button(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.player_back_button, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "player_suspend_button", bundle: ..., traitCollection: ...)`
    static func player_suspend_button(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.player_suspend_button, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 2 localization tables.
  struct string {
    /// This `R.string.infoPlist` struct is generated, and contains static references to 3 localization keys.
    struct infoPlist {
      /// en translation: App requests your permission to access the photos in the gallery.
      ///
      /// Locales: en, zh-Hans
      static let nsPhotoLibraryAddUsageDescription = Rswift.StringResource(key: "NSPhotoLibraryAddUsageDescription", tableName: "InfoPlist", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: App requests your permission to access the photos in the gallery.
      ///
      /// Locales: en, zh-Hans
      static let nsPhotoLibraryUsageDescription = Rswift.StringResource(key: "NSPhotoLibraryUsageDescription", tableName: "InfoPlist", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: To scan the QR code, do you allow using the camera?
      ///
      /// Locales: en, zh-Hans
      static let nsCameraUsageDescription = Rswift.StringResource(key: "NSCameraUsageDescription", tableName: "InfoPlist", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)

      /// en translation: App requests your permission to access the photos in the gallery.
      ///
      /// Locales: en, zh-Hans
      static func nsPhotoLibraryAddUsageDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NSPhotoLibraryAddUsageDescription", tableName: "InfoPlist", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "InfoPlist", preferredLanguages: preferredLanguages) else {
          return "NSPhotoLibraryAddUsageDescription"
        }

        return NSLocalizedString("NSPhotoLibraryAddUsageDescription", tableName: "InfoPlist", bundle: bundle, comment: "")
      }

      /// en translation: App requests your permission to access the photos in the gallery.
      ///
      /// Locales: en, zh-Hans
      static func nsPhotoLibraryUsageDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NSPhotoLibraryUsageDescription", tableName: "InfoPlist", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "InfoPlist", preferredLanguages: preferredLanguages) else {
          return "NSPhotoLibraryUsageDescription"
        }

        return NSLocalizedString("NSPhotoLibraryUsageDescription", tableName: "InfoPlist", bundle: bundle, comment: "")
      }

      /// en translation: To scan the QR code, do you allow using the camera?
      ///
      /// Locales: en, zh-Hans
      static func nsCameraUsageDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NSCameraUsageDescription", tableName: "InfoPlist", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "InfoPlist", preferredLanguages: preferredLanguages) else {
          return "NSCameraUsageDescription"
        }

        return NSLocalizedString("NSCameraUsageDescription", tableName: "InfoPlist", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.localizable` struct is generated, and contains static references to 79 localization keys.
    struct localizable {
      /// en translation: Add Friends
      ///
      /// Locales: en
      static let 添加好友 = Rswift.StringResource(key: "添加好友", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Add Friends
      ///
      /// Locales: en
      static let 添加朋友 = Rswift.StringResource(key: "添加朋友", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: After deletion, the session record will also be cleared
      ///
      /// Locales: en
      static let 删除后会话记录也将清除 = Rswift.StringResource(key: "删除后，会话记录也将清除", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Aim the viewfinder at the QR code and it can be scanned automatically
      ///
      /// Locales: en
      static let 将取景框对准二维码即可自动扫描 = Rswift.StringResource(key: "将取景框对准二维码，即可自动扫描", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Album
      ///
      /// Locales: en
      static let 图片 = Rswift.StringResource(key: "图片", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: All unread messages cleared
      ///
      /// Locales: en
      static let 已清除全部未读消息数 = Rswift.StringResource(key: "已清除全部未读消息数", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Are you sure to delete all friends?
      ///
      /// Locales: en
      static let 确定删除全部好友吗 = Rswift.StringResource(key: "确定删除全部好友吗？", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Are you sure to delete all groups?
      ///
      /// Locales: en
      static let 确定删除全部群组吗 = Rswift.StringResource(key: "确定删除全部群组吗？", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Are you sure to delete this friend?
      ///
      /// Locales: en
      static let 确定删除该好友吗 = Rswift.StringResource(key: "确定删除该好友吗？", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Are you sure you want to leave the current group?
      ///
      /// Locales: en
      static let 确定退出当前群组吗 = Rswift.StringResource(key: "确定退出当前群组吗？", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Author GitHub
      ///
      /// Locales: en
      static let 作者github = Rswift.StringResource(key: "作者github", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Camera
      ///
      /// Locales: en
      static let 拍照 = Rswift.StringResource(key: "拍照", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: en
      static let 取消 = Rswift.StringResource(key: "取消", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Card
      ///
      /// Locales: en
      static let 名片 = Rswift.StringResource(key: "名片", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Chinese
      ///
      /// Locales: en
      static let 简体中文 = Rswift.StringResource(key: "简体中文", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Clear cache
      ///
      /// Locales: en
      static let 清除图片缓存 = Rswift.StringResource(key: "清除图片缓存", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Cleared success
      ///
      /// Locales: en
      static let 清除成功 = Rswift.StringResource(key: "清除成功", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Collection
      ///
      /// Locales: en
      static let 收藏 = Rswift.StringResource(key: "收藏", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Comment
      ///
      /// Locales: en
      static let 评论 = Rswift.StringResource(key: "评论", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Confirm
      ///
      /// Locales: en
      static let 确定 = Rswift.StringResource(key: "确定", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Copy
      ///
      /// Locales: en
      static let 复制 = Rswift.StringResource(key: "复制", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Delete
      ///
      /// Locales: en
      static let 删除 = Rswift.StringResource(key: "删除", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Delete all
      ///
      /// Locales: en
      static let 删除所有好友 = Rswift.StringResource(key: "删除所有好友", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Delete all
      ///
      /// Locales: en
      static let 删除所有群组 = Rswift.StringResource(key: "删除所有群组", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Drak
      ///
      /// Locales: en
      static let 黑夜模式 = Rswift.StringResource(key: "黑夜模式", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: English
      ///
      /// Locales: en
      static let 英文 = Rswift.StringResource(key: "英文", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Exit group
      ///
      /// Locales: en
      static let 退出群 = Rswift.StringResource(key: "退出群", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Follow system
      ///
      /// Locales: en
      static let 跟随系统 = Rswift.StringResource(key: "跟随系统", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Follow system setting
      ///
      /// Locales: en
      static let 选取后将跟随系统设定模式 = Rswift.StringResource(key: "选取后，将跟随系统设定模式", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Forward
      ///
      /// Locales: en
      static let 消息转发 = Rswift.StringResource(key: "消息转发", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Forward
      ///
      /// Locales: en
      static let 转发 = Rswift.StringResource(key: "转发", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Friday
      ///
      /// Locales: en
      static let 星期五 = Rswift.StringResource(key: "星期五", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Friends
      ///
      /// Locales: en
      static let 好友 = Rswift.StringResource(key: "好友", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Group
      ///
      /// Locales: en
      static let 群组 = Rswift.StringResource(key: "群组", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Group chat
      ///
      /// Locales: en
      static let 发起群聊 = Rswift.StringResource(key: "发起群聊", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Group chat
      ///
      /// Locales: en
      static let 群聊 = Rswift.StringResource(key: "群聊", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Hide
      ///
      /// Locales: en
      static let 隐藏 = Rswift.StringResource(key: "隐藏", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Is the latest version
      ///
      /// Locales: en
      static let 已是最新版本 = Rswift.StringResource(key: "已是最新版本", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Join group
      ///
      /// Locales: en
      static let 加入群 = Rswift.StringResource(key: "加入群", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Language settings
      ///
      /// Locales: en
      static let 语言设置 = Rswift.StringResource(key: "语言设置", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Light
      ///
      /// Locales: en
      static let 白天模式 = Rswift.StringResource(key: "白天模式", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Location
      ///
      /// Locales: en
      static let 位置 = Rswift.StringResource(key: "位置", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Mine
      ///
      /// Locales: en
      static let 我 = Rswift.StringResource(key: "我", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Modify remark name
      ///
      /// Locales: en
      static let 修改备注名称 = Rswift.StringResource(key: "修改备注名称", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Monday
      ///
      /// Locales: en
      static let 星期一 = Rswift.StringResource(key: "星期一", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Network disconnected
      ///
      /// Locales: en
      static let 当前网络已断开 = Rswift.StringResource(key: "当前网络已断开", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Personal information
      ///
      /// Locales: en
      static let 个人信息 = Rswift.StringResource(key: "个人信息", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Please enter...
      ///
      /// Locales: en
      static let 请输入 = Rswift.StringResource(key: "请输入...", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Read all
      ///
      /// Locales: en
      static let 全部已读 = Rswift.StringResource(key: "全部已读", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Remark name no more than 12 words
      ///
      /// Locales: en
      static let 备注名称不超过12个字 = Rswift.StringResource(key: "备注名称不超过12个字", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Remark name:
      ///
      /// Locales: en
      static let 备注名 = Rswift.StringResource(key: "备注名：", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Saturday
      ///
      /// Locales: en
      static let 星期六 = Rswift.StringResource(key: "星期六", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Save
      ///
      /// Locales: en
      static let 保存 = Rswift.StringResource(key: "保存", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Saving
      ///
      /// Locales: en
      static let 正在保存 = Rswift.StringResource(key: "正在保存...", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Scan
      ///
      /// Locales: en
      static let 扫一扫 = Rswift.StringResource(key: "扫一扫", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Send
      ///
      /// Locales: en
      static let 发送 = Rswift.StringResource(key: "发送", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Sending
      ///
      /// Locales: en
      static let 发消息 = Rswift.StringResource(key: "发消息", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Session
      ///
      /// Locales: en
      static let 会话 = Rswift.StringResource(key: "会话", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Setting remark name
      ///
      /// Locales: en
      static let 设置备注名 = Rswift.StringResource(key: "设置备注名", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Settings
      ///
      /// Locales: en
      static let 设置 = Rswift.StringResource(key: "设置", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Single chat
      ///
      /// Locales: en
      static let 发起单聊 = Rswift.StringResource(key: "发起单聊", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Star
      ///
      /// Locales: en
      static let 赞 = Rswift.StringResource(key: "赞", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Sunday
      ///
      /// Locales: en
      static let 星期日 = Rswift.StringResource(key: "星期日", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Theme mode
      ///
      /// Locales: en
      static let 主题模式 = Rswift.StringResource(key: "主题模式", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Thursday
      ///
      /// Locales: en
      static let 星期四 = Rswift.StringResource(key: "星期四", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Tips
      ///
      /// Locales: en
      static let 温馨提示 = Rswift.StringResource(key: "温馨提示", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Today
      ///
      /// Locales: en
      static let 今天 = Rswift.StringResource(key: "今天", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Transfer
      ///
      /// Locales: en
      static let 转账 = Rswift.StringResource(key: "转账", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Tuesday
      ///
      /// Locales: en
      static let 星期二 = Rswift.StringResource(key: "星期二", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Username:
      ///
      /// Locales: en
      static let 用户名 = Rswift.StringResource(key: "用户名：", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Version
      ///
      /// Locales: en
      static let 版本 = Rswift.StringResource(key: "版本", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Version number:
      ///
      /// Locales: en
      static let 版本号 = Rswift.StringResource(key: "版本号:", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Video
      ///
      /// Locales: en
      static let 视频 = Rswift.StringResource(key: "视频", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Voice
      ///
      /// Locales: en
      static let 语音 = Rswift.StringResource(key: "语音", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Wallet
      ///
      /// Locales: en
      static let 钱包 = Rswift.StringResource(key: "钱包", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Wechat Moments
      ///
      /// Locales: en
      static let 朋友圈 = Rswift.StringResource(key: "朋友圈", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Wednesday
      ///
      /// Locales: en
      static let 星期三 = Rswift.StringResource(key: "星期三", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Yesterday
      ///
      /// Locales: en
      static let 昨天 = Rswift.StringResource(key: "昨天", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: You have quit %@ group chat
      ///
      /// Locales: en
      static let 你已退出群聊 = Rswift.StringResource(key: "你已退出%@群聊", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)

      /// en translation: Add Friends
      ///
      /// Locales: en
      static func 添加好友(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("添加好友", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "添加好友"
        }

        return NSLocalizedString("添加好友", bundle: bundle, comment: "")
      }

      /// en translation: Add Friends
      ///
      /// Locales: en
      static func 添加朋友(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("添加朋友", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "添加朋友"
        }

        return NSLocalizedString("添加朋友", bundle: bundle, comment: "")
      }

      /// en translation: After deletion, the session record will also be cleared
      ///
      /// Locales: en
      static func 删除后会话记录也将清除(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("删除后，会话记录也将清除", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "删除后，会话记录也将清除"
        }

        return NSLocalizedString("删除后，会话记录也将清除", bundle: bundle, comment: "")
      }

      /// en translation: Aim the viewfinder at the QR code and it can be scanned automatically
      ///
      /// Locales: en
      static func 将取景框对准二维码即可自动扫描(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("将取景框对准二维码，即可自动扫描", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "将取景框对准二维码，即可自动扫描"
        }

        return NSLocalizedString("将取景框对准二维码，即可自动扫描", bundle: bundle, comment: "")
      }

      /// en translation: Album
      ///
      /// Locales: en
      static func 图片(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("图片", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "图片"
        }

        return NSLocalizedString("图片", bundle: bundle, comment: "")
      }

      /// en translation: All unread messages cleared
      ///
      /// Locales: en
      static func 已清除全部未读消息数(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("已清除全部未读消息数", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "已清除全部未读消息数"
        }

        return NSLocalizedString("已清除全部未读消息数", bundle: bundle, comment: "")
      }

      /// en translation: Are you sure to delete all friends?
      ///
      /// Locales: en
      static func 确定删除全部好友吗(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("确定删除全部好友吗？", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "确定删除全部好友吗？"
        }

        return NSLocalizedString("确定删除全部好友吗？", bundle: bundle, comment: "")
      }

      /// en translation: Are you sure to delete all groups?
      ///
      /// Locales: en
      static func 确定删除全部群组吗(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("确定删除全部群组吗？", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "确定删除全部群组吗？"
        }

        return NSLocalizedString("确定删除全部群组吗？", bundle: bundle, comment: "")
      }

      /// en translation: Are you sure to delete this friend?
      ///
      /// Locales: en
      static func 确定删除该好友吗(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("确定删除该好友吗？", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "确定删除该好友吗？"
        }

        return NSLocalizedString("确定删除该好友吗？", bundle: bundle, comment: "")
      }

      /// en translation: Are you sure you want to leave the current group?
      ///
      /// Locales: en
      static func 确定退出当前群组吗(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("确定退出当前群组吗？", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "确定退出当前群组吗？"
        }

        return NSLocalizedString("确定退出当前群组吗？", bundle: bundle, comment: "")
      }

      /// en translation: Author GitHub
      ///
      /// Locales: en
      static func 作者github(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("作者github", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "作者github"
        }

        return NSLocalizedString("作者github", bundle: bundle, comment: "")
      }

      /// en translation: Camera
      ///
      /// Locales: en
      static func 拍照(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("拍照", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "拍照"
        }

        return NSLocalizedString("拍照", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: en
      static func 取消(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("取消", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "取消"
        }

        return NSLocalizedString("取消", bundle: bundle, comment: "")
      }

      /// en translation: Card
      ///
      /// Locales: en
      static func 名片(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("名片", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "名片"
        }

        return NSLocalizedString("名片", bundle: bundle, comment: "")
      }

      /// en translation: Chinese
      ///
      /// Locales: en
      static func 简体中文(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("简体中文", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "简体中文"
        }

        return NSLocalizedString("简体中文", bundle: bundle, comment: "")
      }

      /// en translation: Clear cache
      ///
      /// Locales: en
      static func 清除图片缓存(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("清除图片缓存", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "清除图片缓存"
        }

        return NSLocalizedString("清除图片缓存", bundle: bundle, comment: "")
      }

      /// en translation: Cleared success
      ///
      /// Locales: en
      static func 清除成功(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("清除成功", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "清除成功"
        }

        return NSLocalizedString("清除成功", bundle: bundle, comment: "")
      }

      /// en translation: Collection
      ///
      /// Locales: en
      static func 收藏(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("收藏", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "收藏"
        }

        return NSLocalizedString("收藏", bundle: bundle, comment: "")
      }

      /// en translation: Comment
      ///
      /// Locales: en
      static func 评论(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("评论", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "评论"
        }

        return NSLocalizedString("评论", bundle: bundle, comment: "")
      }

      /// en translation: Confirm
      ///
      /// Locales: en
      static func 确定(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("确定", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "确定"
        }

        return NSLocalizedString("确定", bundle: bundle, comment: "")
      }

      /// en translation: Copy
      ///
      /// Locales: en
      static func 复制(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("复制", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "复制"
        }

        return NSLocalizedString("复制", bundle: bundle, comment: "")
      }

      /// en translation: Delete
      ///
      /// Locales: en
      static func 删除(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("删除", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "删除"
        }

        return NSLocalizedString("删除", bundle: bundle, comment: "")
      }

      /// en translation: Delete all
      ///
      /// Locales: en
      static func 删除所有好友(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("删除所有好友", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "删除所有好友"
        }

        return NSLocalizedString("删除所有好友", bundle: bundle, comment: "")
      }

      /// en translation: Delete all
      ///
      /// Locales: en
      static func 删除所有群组(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("删除所有群组", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "删除所有群组"
        }

        return NSLocalizedString("删除所有群组", bundle: bundle, comment: "")
      }

      /// en translation: Drak
      ///
      /// Locales: en
      static func 黑夜模式(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("黑夜模式", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "黑夜模式"
        }

        return NSLocalizedString("黑夜模式", bundle: bundle, comment: "")
      }

      /// en translation: English
      ///
      /// Locales: en
      static func 英文(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("英文", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "英文"
        }

        return NSLocalizedString("英文", bundle: bundle, comment: "")
      }

      /// en translation: Exit group
      ///
      /// Locales: en
      static func 退出群(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("退出群", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "退出群"
        }

        return NSLocalizedString("退出群", bundle: bundle, comment: "")
      }

      /// en translation: Follow system
      ///
      /// Locales: en
      static func 跟随系统(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("跟随系统", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "跟随系统"
        }

        return NSLocalizedString("跟随系统", bundle: bundle, comment: "")
      }

      /// en translation: Follow system setting
      ///
      /// Locales: en
      static func 选取后将跟随系统设定模式(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("选取后，将跟随系统设定模式", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "选取后，将跟随系统设定模式"
        }

        return NSLocalizedString("选取后，将跟随系统设定模式", bundle: bundle, comment: "")
      }

      /// en translation: Forward
      ///
      /// Locales: en
      static func 消息转发(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("消息转发", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "消息转发"
        }

        return NSLocalizedString("消息转发", bundle: bundle, comment: "")
      }

      /// en translation: Forward
      ///
      /// Locales: en
      static func 转发(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("转发", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "转发"
        }

        return NSLocalizedString("转发", bundle: bundle, comment: "")
      }

      /// en translation: Friday
      ///
      /// Locales: en
      static func 星期五(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("星期五", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "星期五"
        }

        return NSLocalizedString("星期五", bundle: bundle, comment: "")
      }

      /// en translation: Friends
      ///
      /// Locales: en
      static func 好友(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("好友", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "好友"
        }

        return NSLocalizedString("好友", bundle: bundle, comment: "")
      }

      /// en translation: Group
      ///
      /// Locales: en
      static func 群组(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("群组", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "群组"
        }

        return NSLocalizedString("群组", bundle: bundle, comment: "")
      }

      /// en translation: Group chat
      ///
      /// Locales: en
      static func 发起群聊(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("发起群聊", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "发起群聊"
        }

        return NSLocalizedString("发起群聊", bundle: bundle, comment: "")
      }

      /// en translation: Group chat
      ///
      /// Locales: en
      static func 群聊(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("群聊", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "群聊"
        }

        return NSLocalizedString("群聊", bundle: bundle, comment: "")
      }

      /// en translation: Hide
      ///
      /// Locales: en
      static func 隐藏(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("隐藏", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "隐藏"
        }

        return NSLocalizedString("隐藏", bundle: bundle, comment: "")
      }

      /// en translation: Is the latest version
      ///
      /// Locales: en
      static func 已是最新版本(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("已是最新版本", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "已是最新版本"
        }

        return NSLocalizedString("已是最新版本", bundle: bundle, comment: "")
      }

      /// en translation: Join group
      ///
      /// Locales: en
      static func 加入群(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("加入群", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "加入群"
        }

        return NSLocalizedString("加入群", bundle: bundle, comment: "")
      }

      /// en translation: Language settings
      ///
      /// Locales: en
      static func 语言设置(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("语言设置", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "语言设置"
        }

        return NSLocalizedString("语言设置", bundle: bundle, comment: "")
      }

      /// en translation: Light
      ///
      /// Locales: en
      static func 白天模式(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("白天模式", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "白天模式"
        }

        return NSLocalizedString("白天模式", bundle: bundle, comment: "")
      }

      /// en translation: Location
      ///
      /// Locales: en
      static func 位置(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("位置", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "位置"
        }

        return NSLocalizedString("位置", bundle: bundle, comment: "")
      }

      /// en translation: Mine
      ///
      /// Locales: en
      static func 我(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("我", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "我"
        }

        return NSLocalizedString("我", bundle: bundle, comment: "")
      }

      /// en translation: Modify remark name
      ///
      /// Locales: en
      static func 修改备注名称(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("修改备注名称", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "修改备注名称"
        }

        return NSLocalizedString("修改备注名称", bundle: bundle, comment: "")
      }

      /// en translation: Monday
      ///
      /// Locales: en
      static func 星期一(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("星期一", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "星期一"
        }

        return NSLocalizedString("星期一", bundle: bundle, comment: "")
      }

      /// en translation: Network disconnected
      ///
      /// Locales: en
      static func 当前网络已断开(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("当前网络已断开", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "当前网络已断开"
        }

        return NSLocalizedString("当前网络已断开", bundle: bundle, comment: "")
      }

      /// en translation: Personal information
      ///
      /// Locales: en
      static func 个人信息(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("个人信息", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "个人信息"
        }

        return NSLocalizedString("个人信息", bundle: bundle, comment: "")
      }

      /// en translation: Please enter...
      ///
      /// Locales: en
      static func 请输入(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("请输入...", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "请输入..."
        }

        return NSLocalizedString("请输入...", bundle: bundle, comment: "")
      }

      /// en translation: Read all
      ///
      /// Locales: en
      static func 全部已读(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("全部已读", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "全部已读"
        }

        return NSLocalizedString("全部已读", bundle: bundle, comment: "")
      }

      /// en translation: Remark name no more than 12 words
      ///
      /// Locales: en
      static func 备注名称不超过12个字(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("备注名称不超过12个字", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "备注名称不超过12个字"
        }

        return NSLocalizedString("备注名称不超过12个字", bundle: bundle, comment: "")
      }

      /// en translation: Remark name:
      ///
      /// Locales: en
      static func 备注名(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("备注名：", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "备注名："
        }

        return NSLocalizedString("备注名：", bundle: bundle, comment: "")
      }

      /// en translation: Saturday
      ///
      /// Locales: en
      static func 星期六(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("星期六", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "星期六"
        }

        return NSLocalizedString("星期六", bundle: bundle, comment: "")
      }

      /// en translation: Save
      ///
      /// Locales: en
      static func 保存(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("保存", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "保存"
        }

        return NSLocalizedString("保存", bundle: bundle, comment: "")
      }

      /// en translation: Saving
      ///
      /// Locales: en
      static func 正在保存(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("正在保存...", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "正在保存..."
        }

        return NSLocalizedString("正在保存...", bundle: bundle, comment: "")
      }

      /// en translation: Scan
      ///
      /// Locales: en
      static func 扫一扫(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("扫一扫", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "扫一扫"
        }

        return NSLocalizedString("扫一扫", bundle: bundle, comment: "")
      }

      /// en translation: Send
      ///
      /// Locales: en
      static func 发送(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("发送", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "发送"
        }

        return NSLocalizedString("发送", bundle: bundle, comment: "")
      }

      /// en translation: Sending
      ///
      /// Locales: en
      static func 发消息(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("发消息", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "发消息"
        }

        return NSLocalizedString("发消息", bundle: bundle, comment: "")
      }

      /// en translation: Session
      ///
      /// Locales: en
      static func 会话(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("会话", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "会话"
        }

        return NSLocalizedString("会话", bundle: bundle, comment: "")
      }

      /// en translation: Setting remark name
      ///
      /// Locales: en
      static func 设置备注名(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("设置备注名", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "设置备注名"
        }

        return NSLocalizedString("设置备注名", bundle: bundle, comment: "")
      }

      /// en translation: Settings
      ///
      /// Locales: en
      static func 设置(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("设置", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "设置"
        }

        return NSLocalizedString("设置", bundle: bundle, comment: "")
      }

      /// en translation: Single chat
      ///
      /// Locales: en
      static func 发起单聊(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("发起单聊", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "发起单聊"
        }

        return NSLocalizedString("发起单聊", bundle: bundle, comment: "")
      }

      /// en translation: Star
      ///
      /// Locales: en
      static func 赞(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("赞", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "赞"
        }

        return NSLocalizedString("赞", bundle: bundle, comment: "")
      }

      /// en translation: Sunday
      ///
      /// Locales: en
      static func 星期日(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("星期日", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "星期日"
        }

        return NSLocalizedString("星期日", bundle: bundle, comment: "")
      }

      /// en translation: Theme mode
      ///
      /// Locales: en
      static func 主题模式(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("主题模式", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "主题模式"
        }

        return NSLocalizedString("主题模式", bundle: bundle, comment: "")
      }

      /// en translation: Thursday
      ///
      /// Locales: en
      static func 星期四(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("星期四", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "星期四"
        }

        return NSLocalizedString("星期四", bundle: bundle, comment: "")
      }

      /// en translation: Tips
      ///
      /// Locales: en
      static func 温馨提示(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("温馨提示", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "温馨提示"
        }

        return NSLocalizedString("温馨提示", bundle: bundle, comment: "")
      }

      /// en translation: Today
      ///
      /// Locales: en
      static func 今天(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("今天", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "今天"
        }

        return NSLocalizedString("今天", bundle: bundle, comment: "")
      }

      /// en translation: Transfer
      ///
      /// Locales: en
      static func 转账(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("转账", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "转账"
        }

        return NSLocalizedString("转账", bundle: bundle, comment: "")
      }

      /// en translation: Tuesday
      ///
      /// Locales: en
      static func 星期二(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("星期二", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "星期二"
        }

        return NSLocalizedString("星期二", bundle: bundle, comment: "")
      }

      /// en translation: Username:
      ///
      /// Locales: en
      static func 用户名(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("用户名：", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "用户名："
        }

        return NSLocalizedString("用户名：", bundle: bundle, comment: "")
      }

      /// en translation: Version
      ///
      /// Locales: en
      static func 版本(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("版本", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "版本"
        }

        return NSLocalizedString("版本", bundle: bundle, comment: "")
      }

      /// en translation: Version number:
      ///
      /// Locales: en
      static func 版本号(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("版本号:", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "版本号:"
        }

        return NSLocalizedString("版本号:", bundle: bundle, comment: "")
      }

      /// en translation: Video
      ///
      /// Locales: en
      static func 视频(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("视频", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "视频"
        }

        return NSLocalizedString("视频", bundle: bundle, comment: "")
      }

      /// en translation: Voice
      ///
      /// Locales: en
      static func 语音(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("语音", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "语音"
        }

        return NSLocalizedString("语音", bundle: bundle, comment: "")
      }

      /// en translation: Wallet
      ///
      /// Locales: en
      static func 钱包(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("钱包", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "钱包"
        }

        return NSLocalizedString("钱包", bundle: bundle, comment: "")
      }

      /// en translation: Wechat Moments
      ///
      /// Locales: en
      static func 朋友圈(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("朋友圈", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "朋友圈"
        }

        return NSLocalizedString("朋友圈", bundle: bundle, comment: "")
      }

      /// en translation: Wednesday
      ///
      /// Locales: en
      static func 星期三(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("星期三", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "星期三"
        }

        return NSLocalizedString("星期三", bundle: bundle, comment: "")
      }

      /// en translation: Yesterday
      ///
      /// Locales: en
      static func 昨天(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("昨天", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "昨天"
        }

        return NSLocalizedString("昨天", bundle: bundle, comment: "")
      }

      /// en translation: You have quit %@ group chat
      ///
      /// Locales: en
      static func 你已退出群聊(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("你已退出%@群聊", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "你已退出%@群聊"
        }

        let format = NSLocalizedString("你已退出%@群聊", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
